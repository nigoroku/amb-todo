// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTags)
	t.Run("OutputAchievements", testOutputAchievements)
	t.Run("Tags", testTags)
	t.Run("TodoDetails", testTodoDetails)
	t.Run("Todos", testTodos)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsDelete)
	t.Run("OutputAchievements", testOutputAchievementsDelete)
	t.Run("Tags", testTagsDelete)
	t.Run("TodoDetails", testTodoDetailsDelete)
	t.Run("Todos", testTodosDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsQueryDeleteAll)
	t.Run("OutputAchievements", testOutputAchievementsQueryDeleteAll)
	t.Run("Tags", testTagsQueryDeleteAll)
	t.Run("TodoDetails", testTodoDetailsQueryDeleteAll)
	t.Run("Todos", testTodosQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsSliceDeleteAll)
	t.Run("OutputAchievements", testOutputAchievementsSliceDeleteAll)
	t.Run("Tags", testTagsSliceDeleteAll)
	t.Run("TodoDetails", testTodoDetailsSliceDeleteAll)
	t.Run("Todos", testTodosSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsExists)
	t.Run("OutputAchievements", testOutputAchievementsExists)
	t.Run("Tags", testTagsExists)
	t.Run("TodoDetails", testTodoDetailsExists)
	t.Run("Todos", testTodosExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsFind)
	t.Run("OutputAchievements", testOutputAchievementsFind)
	t.Run("Tags", testTagsFind)
	t.Run("TodoDetails", testTodoDetailsFind)
	t.Run("Todos", testTodosFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsBind)
	t.Run("OutputAchievements", testOutputAchievementsBind)
	t.Run("Tags", testTagsBind)
	t.Run("TodoDetails", testTodoDetailsBind)
	t.Run("Todos", testTodosBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsOne)
	t.Run("OutputAchievements", testOutputAchievementsOne)
	t.Run("Tags", testTagsOne)
	t.Run("TodoDetails", testTodoDetailsOne)
	t.Run("Todos", testTodosOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsAll)
	t.Run("OutputAchievements", testOutputAchievementsAll)
	t.Run("Tags", testTagsAll)
	t.Run("TodoDetails", testTodoDetailsAll)
	t.Run("Todos", testTodosAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsCount)
	t.Run("OutputAchievements", testOutputAchievementsCount)
	t.Run("Tags", testTagsCount)
	t.Run("TodoDetails", testTodoDetailsCount)
	t.Run("Todos", testTodosCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsHooks)
	t.Run("OutputAchievements", testOutputAchievementsHooks)
	t.Run("Tags", testTagsHooks)
	t.Run("TodoDetails", testTodoDetailsHooks)
	t.Run("Todos", testTodosHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsInsert)
	t.Run("OutputAchievementTags", testOutputAchievementTagsInsertWhitelist)
	t.Run("OutputAchievements", testOutputAchievementsInsert)
	t.Run("OutputAchievements", testOutputAchievementsInsertWhitelist)
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
	t.Run("TodoDetails", testTodoDetailsInsert)
	t.Run("TodoDetails", testTodoDetailsInsertWhitelist)
	t.Run("Todos", testTodosInsert)
	t.Run("Todos", testTodosInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("OutputAchievementTagToTagUsingTag", testOutputAchievementTagToOneTagUsingTag)
	t.Run("OutputAchievementTagToOutputAchievementUsingOutputAchievement", testOutputAchievementTagToOneOutputAchievementUsingOutputAchievement)
	t.Run("OutputAchievementToTodoUsingTodo", testOutputAchievementToOneTodoUsingTodo)
	t.Run("TodoDetailToTodoUsingTodo", testTodoDetailToOneTodoUsingTodo)
	t.Run("TodoToUserUsingUser", testTodoToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("OutputAchievementToOutputAchievementTags", testOutputAchievementToManyOutputAchievementTags)
	t.Run("TagToOutputAchievementTags", testTagToManyOutputAchievementTags)
	t.Run("TodoToOutputAchievements", testTodoToManyOutputAchievements)
	t.Run("TodoToTodoDetails", testTodoToManyTodoDetails)
	t.Run("UserToTodos", testUserToManyTodos)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("OutputAchievementTagToTagUsingOutputAchievementTags", testOutputAchievementTagToOneSetOpTagUsingTag)
	t.Run("OutputAchievementTagToOutputAchievementUsingOutputAchievementTags", testOutputAchievementTagToOneSetOpOutputAchievementUsingOutputAchievement)
	t.Run("OutputAchievementToTodoUsingOutputAchievements", testOutputAchievementToOneSetOpTodoUsingTodo)
	t.Run("TodoDetailToTodoUsingTodoDetails", testTodoDetailToOneSetOpTodoUsingTodo)
	t.Run("TodoToUserUsingTodos", testTodoToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("OutputAchievementToTodoUsingOutputAchievements", testOutputAchievementToOneRemoveOpTodoUsingTodo)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("OutputAchievementToOutputAchievementTags", testOutputAchievementToManyAddOpOutputAchievementTags)
	t.Run("TagToOutputAchievementTags", testTagToManyAddOpOutputAchievementTags)
	t.Run("TodoToOutputAchievements", testTodoToManyAddOpOutputAchievements)
	t.Run("TodoToTodoDetails", testTodoToManyAddOpTodoDetails)
	t.Run("UserToTodos", testUserToManyAddOpTodos)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("TodoToOutputAchievements", testTodoToManySetOpOutputAchievements)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("TodoToOutputAchievements", testTodoToManyRemoveOpOutputAchievements)
}

func TestReload(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsReload)
	t.Run("OutputAchievements", testOutputAchievementsReload)
	t.Run("Tags", testTagsReload)
	t.Run("TodoDetails", testTodoDetailsReload)
	t.Run("Todos", testTodosReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsReloadAll)
	t.Run("OutputAchievements", testOutputAchievementsReloadAll)
	t.Run("Tags", testTagsReloadAll)
	t.Run("TodoDetails", testTodoDetailsReloadAll)
	t.Run("Todos", testTodosReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsSelect)
	t.Run("OutputAchievements", testOutputAchievementsSelect)
	t.Run("Tags", testTagsSelect)
	t.Run("TodoDetails", testTodoDetailsSelect)
	t.Run("Todos", testTodosSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsUpdate)
	t.Run("OutputAchievements", testOutputAchievementsUpdate)
	t.Run("Tags", testTagsUpdate)
	t.Run("TodoDetails", testTodoDetailsUpdate)
	t.Run("Todos", testTodosUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("OutputAchievementTags", testOutputAchievementTagsSliceUpdateAll)
	t.Run("OutputAchievements", testOutputAchievementsSliceUpdateAll)
	t.Run("Tags", testTagsSliceUpdateAll)
	t.Run("TodoDetails", testTodoDetailsSliceUpdateAll)
	t.Run("Todos", testTodosSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
